/*
 * This source file was generated by the Gradle 'init' task
 */
package quombat.xml.serialization;
import java.math.BigInteger;
import java.util.ArrayList;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;

import gov.loc.mets.v2.*;
import gov.loc.mets.v2.MetsType.MetsHdr;
import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.Marshaller;
import jakarta.xml.bind.Unmarshaller;

@JacksonXmlRootElement(localName = "author")
record Author(
        @JacksonXmlProperty() String surname,
        @JacksonXmlProperty() String firstname) {
}

@JacksonXmlRootElement(localName = "book")
record Book(
    @JacksonXmlProperty() String title,
    @JacksonXmlProperty() int publicationYear,
    @JacksonXmlElementWrapper(localName="authors")
    @JacksonXmlProperty(localName="author") ArrayList<Author> authors
    ) {}

public class App {
    public String getGreeting() {
        return "Two ways to build a METS document, the Java way!";
    }

    public static void main(String[] args) throws JsonProcessingException, JAXBException {
        System.out.println(new App().getGreeting());


        // VARIATION 1: JACKSON XML
        // build simpler domain objects? DTOs? that will be 
        // serialized to XML and then transformed with XSLT into a METS2 document
        Author author1 = new Author("Bradbury", "Ray");
        Author author2 = new Author("Asimov", "Isaac");

        Book book = new Book("R is for Rocket", 1957, new ArrayList<Author>());
        book.authors().add(author1);
        book.authors().add(author2);
        book.authors().add(new Author("Heinlein", "Robert"));

        XmlMapper xmlMapper = new XmlMapper();
        String bookXml = xmlMapper.writeValueAsString(book);
        System.out.println("== VARIATION: JACKSON XML MAPPING");
        System.out.println(bookXml);

        // VARIATION 2: JAXB MARSHALLING
        // the METS2 schema has been compiled into classes; build a METS
        // step by every step
        Mets metsDoc = new Mets();
        metsDoc.setID("64DF7F78-2AC1-4191-9C52-0CB696199D34");
        metsDoc.setOBJID("clark1ic:3999999");
        metsDoc.setTYPE("types:fileset");

        MetsHdr hdr = new MetsHdr();
        MetsHdr.Agent agent = new MetsHdr.Agent();
        agent.setName("Ray Bradbury");
        agent.setROLE("author");
        hdr.getAgent().add(agent);
        metsDoc.setMetsHdr(hdr);

        MdSecType mdSec = new MdSecType();
        metsDoc.setMdSec(mdSec);

        MdType md1 = new MdType();
        md1.setID("001");
        md1.setUSE("function:service");
        MdType.MdRef ref1 = new MdType.MdRef();
        ref1.setLOCTYPE("URL");
        ref1.setMDTYPE("dlxs:schema:common");
        ref1.setLOCREF("path/to/service~md.dlxs.json");
        md1.setMdRef(ref1);
        mdSec.getMd().add(md1);

        MdType md2 = new MdType();
        md2.setID("002");
        md2.setUSE("function:source");
        MdType.MdRef ref2 = new MdType.MdRef();
        ref2.setLOCTYPE("URL");
        ref2.setMDTYPE("dlxs:schema:tei");
        ref2.setLOCREF("path/to/source~md.dlxs.json");
        md2.setMdRef(ref2);
        mdSec.getMd().add(md2);

        MetsType.StructSec structSec = new MetsType.StructSec();
        metsDoc.setStructSec(structSec);

        StructMapType structMap1 = new StructMapType();
        structMap1.setID("struct:physical");
        DivType div1 = new DivType();
        div1.setLABEL("div:object");
        structMap1.setDiv(div1);
        structSec.getStructMap().add(structMap1);

        DivType div1_1 = new DivType();
        div1_1.setLABEL("div:slide");
        div1_1.setORDER(BigInteger.valueOf(1));
        div1_1.setORDERLABEL("Slide 1");
        DivType.Mptr mptr1_1 = new DivType.Mptr();
        mptr1_1.setLOCREF("10001.mets.xml");
        mptr1_1.setLOCTYPE("URL");
        div1_1.getMptr().add(mptr1_1);
        div1.getDiv().add(div1_1);

        DivType div1_2 = new DivType();
        div1_2.setLABEL("div:slide");
        div1_2.setORDER(BigInteger.valueOf(2));
        div1_2.setORDERLABEL("Slide 2");
        DivType.Mptr mptr1_2 = new DivType.Mptr();
        mptr1_2.setLOCREF("10002.mets.xml");
        mptr1_2.setLOCTYPE("URL");
        div1_2.getMptr().add(mptr1_2);
        div1.getDiv().add(div1_2);

        System.out.println("\n\n== VARIATION: JAXB XML MARSHALLING");
        JAXBContext context = JAXBContext.newInstance(ObjectFactory.class);
        Marshaller marshaller = context.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        marshaller.marshal(metsDoc, System.out);

        // what about parsing an XML document?
        Unmarshaller u = context.createUnmarshaller();
        // u.setProperty("org.glassfish.jaxb.ObjectFactory", new gov.loc.mets.v2.ObjectFactory());
        java.io.File fileSetXmlFile = new java.io.File("sample.file_set.mets2.xml");
        Mets fileSetDoc = (Mets)u.unmarshal(fileSetXmlFile);
        System.out.println("\n\n== VARIATION: JAXB XML UNMARSHALLING");
        System.out.println((fileSetDoc.getMetsHdr().getAltRecordID()).getFirst().getValue());
    }
}
