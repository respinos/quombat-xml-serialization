//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package gov.loc.mets.v2;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAnyAttribute;
import jakarta.xml.bind.annotation.XmlAnyElement;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlID;
import jakarta.xml.bind.annotation.XmlIDREF;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.w3c.dom.Element;


/**
 * fileType: Complex Type for Files
 * 				The file element provides access to content files for a METS object.  A file element may contain one or more FLocat elements, which provide pointers to a content file, and/or an FContent element, which wraps an encoded version of the file. Note that ALL FLocat and FContent elements underneath a single file element should identify/contain identical copies of a single file.
 * 
 * <p>Java class for fileType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="fileType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="FLocat" maxOccurs="unbounded" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <attGroup ref="{http://www.loc.gov/METS/v2}LOCATION"/>
 *                 <attribute name="ID" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *                 <attribute name="USE" type="{http://www.w3.org/2001/XMLSchema}string" />
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="FContent" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <choice>
 *                   <element name="binData" type="{http://www.w3.org/2001/XMLSchema}base64Binary" minOccurs="0"/>
 *                   <element name="xmlData" minOccurs="0">
 *                     <complexType>
 *                       <complexContent>
 *                         <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           <sequence>
 *                             <any processContents='lax' maxOccurs="unbounded"/>
 *                           </sequence>
 *                         </restriction>
 *                       </complexContent>
 *                     </complexType>
 *                   </element>
 *                 </choice>
 *                 <attribute name="ID" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *                 <attribute name="USE" type="{http://www.w3.org/2001/XMLSchema}string" />
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="stream" maxOccurs="unbounded" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <attribute name="ID" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *                 <attribute name="streamType" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 <attribute name="OWNERID" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 <attribute name="MDID" type="{http://www.w3.org/2001/XMLSchema}IDREFS" />
 *                 <attribute name="BEGIN" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 <attribute name="END" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 <attribute name="BETYPE" type="{http://www.w3.org/2001/XMLSchema}string" />
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="transformFile" maxOccurs="unbounded" minOccurs="0">
 *           <complexType>
 *             <complexContent>
 *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 <attribute name="ID" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *                 <attribute name="TRANSFORMTYPE" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 <attribute name="TRANSFORMALGORITHM" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 <attribute name="TRANSFORMKEY" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                 <attribute name="TRANSFORMORDER" use="required" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" />
 *               </restriction>
 *             </complexContent>
 *           </complexType>
 *         </element>
 *         <element name="file" type="{http://www.loc.gov/METS/v2}fileType" maxOccurs="unbounded" minOccurs="0"/>
 *       </sequence>
 *       <attGroup ref="{http://www.loc.gov/METS/v2}FILECORE"/>
 *       <attribute name="ID" use="required" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *       <attribute name="SEQ" type="{http://www.w3.org/2001/XMLSchema}int" />
 *       <attribute name="OWNERID" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       <attribute name="MDID" type="{http://www.w3.org/2001/XMLSchema}IDREFS" />
 *       <attribute name="GROUPID" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       <attribute name="USE" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       <attribute name="BEGIN" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       <attribute name="END" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       <attribute name="BETYPE" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       <anyAttribute processContents='lax' namespace='##other'/>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "fileType", propOrder = {
    "fLocat",
    "fContent",
    "stream",
    "transformFile",
    "file"
})
public class FileType {

    /**
     * The file location element <FLocat> provides a pointer to the location of a content file. NOTE: <FLocat> is an empty element.
     * 
     */
    @XmlElement(name = "FLocat")
    protected List<FileType.FLocat> fLocat;
    /**
     * The file content element <FContent> is used to identify a content file contained internally within a METS document. The content file must be either Base64 encoded and contained within the subsidiary <binData> wrapper element, or consist of XML information and be contained within the subsidiary <xmlData> wrapper element.
     * 
     */
    @XmlElement(name = "FContent")
    protected FileType.FContent fContent;
    /**
     * A component byte stream element <stream> may be composed of one or more subsidiary streams. An MPEG4 file, for example, might contain separate audio and video streams, each of which is associated with technical metadata. The repeatable <stream> element provides a mechanism to record the existence of separate data streams within a particular file, and the opportunity to <mdSec> elements with those subsidiary data streams if desired.
     * 
     */
    protected List<FileType.Stream> stream;
    /**
     * The transform file element <transformFile> provides a means to access any subsidiary files listed below a <file> element by indicating the steps required to "unpack" or transform the subsidiary files. This element is repeatable.
     * 
     */
    protected List<FileType.TransformFile> transformFile;
    protected List<FileType> file;
    /**
     * ID (ID/R): This attribute uniquely identifies the element within the METS document, and would allow the element to be referenced unambiguously from another element or document via an IDREF or an XPTR. Typically, the ID attribute value on a <file> element would be referenced from one or more FILEID attributes (which are of type IDREF) on <fptr>and/or <area> elements within the <structMap>.  Such references establish links between  structural divisions (<div> elements) and the specific content files or parts of content files that manifest them. For more information on using ID attributes for internal and external linking see Chapter 4 of the METS Primer.
     * 
     */
    @XmlAttribute(name = "ID", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    /**
     * SEQ (integer/O): Indicates the sequence of this <file> relative to the others in its <fileGrp>.
     * 
     */
    @XmlAttribute(name = "SEQ")
    protected Integer seq;
    /**
     * OWNERID (string/O): A unique identifier assigned to the file by its owner.  This may be a URI which differs from the URI used to retrieve the file.
     * 
     */
    @XmlAttribute(name = "OWNERID")
    protected String ownerid;
    /**
     * MDID (IDREFS/O): Contains the ID attribute values of the <md> elements within the <mdSec> of the METS document that contain administrative metadata pertaining to the file. For more information on using METS IDREFS and IDREF type attributes for internal linking, see Chapter 4 of the METS Primer.
     * 
     */
    @XmlAttribute(name = "MDID")
    @XmlIDREF
    @XmlSchemaType(name = "IDREFS")
    protected List<Object> mdid;
    /**
     * GROUPID (string/O): An identifier that establishes a correspondence between this file and files in other file groups. Typically, this will be used to associate a master file in one file group with the derivative files made from it in other file groups.
     * 
     */
    @XmlAttribute(name = "GROUPID")
    protected String groupid;
    /**
     * USE (string/O): A tagging attribute to indicate the intended use of all copies of the file aggregated by the <file> element (e.g., master, reference, thumbnails for image files). A USE attribute can be expressed at the<fileGrp> level, the <file> level, the <FLocat> level and/or the <FContent> level.  A USE attribute value at the <fileGrp> level should pertain to all of the files in the <fileGrp>.  A USE attribute at the <file> level should pertain to all copies of the file as represented by subsidiary <FLocat> and/or <FContent> elements.  A USE attribute at the <FLocat> or <FContent> level pertains to the particular copy of the file that is either referenced (<FLocat>) or wrapped (<FContent>).
     * 
     */
    @XmlAttribute(name = "USE")
    protected String use;
    /**
     * BEGIN (string/O): An attribute that specifies the point in the parent <file> where the current <file> begins.  When used in conjunction with a <file> element, this attribute is only meaningful when this element is nested, and its parent <file> element represents a container file. It can be used in conjunction with the END attribute as a means of defining the location of the current file within its parent file. However, the BEGIN attribute can be used with or without a companion END attribute. When no END attribute is specified, the end of the parent file is assumed also to be the end point of the current file. The BEGIN and END attributes can only be interpreted meaningfully in conjunction with a BETYPE attribute, which specifies the kind of beginning/ending point values that are being used.
     * 
     */
    @XmlAttribute(name = "BEGIN")
    protected String begin;
    /**
     * END (string/O): An attribute that specifies the point in the parent <file> where the current, nested <file> ends. It can only be interpreted meaningfully in conjunction with the BETYPE, which specifies the kind of ending point values being used. Typically the END attribute would only appear in conjunction with a BEGIN attribute.
     * 
     */
    @XmlAttribute(name = "END")
    protected String end;
    /**
     * BETYPE: Begin/End Type.
     * 					BETYPE (string/O): An attribute that specifies the kind of BEGIN and/or END values that are being used.
     *           Suggested attribute values: https://github.com/mets/METS-schema/wiki/METS2-Suggested-Attribute-Values#filebetype-streambetype
     * 
     */
    @XmlAttribute(name = "BETYPE")
    protected String betype;
    /**
     * MIMETYPE (string/O): The IANA MIME media type for the associated file or wrapped content. Some values for this attribute can be found on the IANA website.
     * 
     */
    @XmlAttribute(name = "MIMETYPE")
    protected String mimetype;
    /**
     * SIZE (long/O): Specifies the size in bytes of the associated file or wrapped content.
     * 
     */
    @XmlAttribute(name = "SIZE")
    protected Long size;
    /**
     * CREATED (dateTime/O): Specifies the date and time of creation for the associated file or wrapped content.
     * 
     */
    @XmlAttribute(name = "CREATED")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar created;
    /**
     * CHECKSUM (string/O): Provides a checksum value for the associated file or wrapped content.
     * 
     */
    @XmlAttribute(name = "CHECKSUM")
    protected String checksum;
    /**
     * CHECKSUMTYPE (enumerated string/O): Specifies the checksum algorithm used to produce the value contained in the CHECKSUM attribute. 
     *           Suggested attribute values: https://github.com/mets/METS-schema/wiki/METS2-Suggested-Attribute-Values#checksumtype-mdref-mdwrap
     * 
     */
    @XmlAttribute(name = "CHECKSUMTYPE")
    protected String checksumtype;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<>();

    /**
     * The file location element <FLocat> provides a pointer to the location of a content file. NOTE: <FLocat> is an empty element.
     * 
     * Gets the value of the fLocat property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fLocat property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getFLocat().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FileType.FLocat }
     * </p>
     * 
     * 
     * @return
     *     The value of the fLocat property.
     */
    public List<FileType.FLocat> getFLocat() {
        if (fLocat == null) {
            fLocat = new ArrayList<>();
        }
        return this.fLocat;
    }

    /**
     * The file content element <FContent> is used to identify a content file contained internally within a METS document. The content file must be either Base64 encoded and contained within the subsidiary <binData> wrapper element, or consist of XML information and be contained within the subsidiary <xmlData> wrapper element.
     * 
     * @return
     *     possible object is
     *     {@link FileType.FContent }
     *     
     */
    public FileType.FContent getFContent() {
        return fContent;
    }

    /**
     * Sets the value of the fContent property.
     * 
     * @param value
     *     allowed object is
     *     {@link FileType.FContent }
     *     
     * @see #getFContent()
     */
    public void setFContent(FileType.FContent value) {
        this.fContent = value;
    }

    /**
     * A component byte stream element <stream> may be composed of one or more subsidiary streams. An MPEG4 file, for example, might contain separate audio and video streams, each of which is associated with technical metadata. The repeatable <stream> element provides a mechanism to record the existence of separate data streams within a particular file, and the opportunity to <mdSec> elements with those subsidiary data streams if desired.
     * 
     * Gets the value of the stream property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the stream property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getStream().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FileType.Stream }
     * </p>
     * 
     * 
     * @return
     *     The value of the stream property.
     */
    public List<FileType.Stream> getStream() {
        if (stream == null) {
            stream = new ArrayList<>();
        }
        return this.stream;
    }

    /**
     * The transform file element <transformFile> provides a means to access any subsidiary files listed below a <file> element by indicating the steps required to "unpack" or transform the subsidiary files. This element is repeatable.
     * 
     * Gets the value of the transformFile property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the transformFile property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getTransformFile().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FileType.TransformFile }
     * </p>
     * 
     * 
     * @return
     *     The value of the transformFile property.
     */
    public List<FileType.TransformFile> getTransformFile() {
        if (transformFile == null) {
            transformFile = new ArrayList<>();
        }
        return this.transformFile;
    }

    /**
     * Gets the value of the file property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the file property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getFile().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FileType }
     * </p>
     * 
     * 
     * @return
     *     The value of the file property.
     */
    public List<FileType> getFile() {
        if (file == null) {
            file = new ArrayList<>();
        }
        return this.file;
    }

    /**
     * ID (ID/R): This attribute uniquely identifies the element within the METS document, and would allow the element to be referenced unambiguously from another element or document via an IDREF or an XPTR. Typically, the ID attribute value on a <file> element would be referenced from one or more FILEID attributes (which are of type IDREF) on <fptr>and/or <area> elements within the <structMap>.  Such references establish links between  structural divisions (<div> elements) and the specific content files or parts of content files that manifest them. For more information on using ID attributes for internal and external linking see Chapter 4 of the METS Primer.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getID() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getID()
     */
    public void setID(String value) {
        this.id = value;
    }

    /**
     * SEQ (integer/O): Indicates the sequence of this <file> relative to the others in its <fileGrp>.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getSEQ() {
        return seq;
    }

    /**
     * Sets the value of the seq property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     * @see #getSEQ()
     */
    public void setSEQ(Integer value) {
        this.seq = value;
    }

    /**
     * OWNERID (string/O): A unique identifier assigned to the file by its owner.  This may be a URI which differs from the URI used to retrieve the file.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOWNERID() {
        return ownerid;
    }

    /**
     * Sets the value of the ownerid property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getOWNERID()
     */
    public void setOWNERID(String value) {
        this.ownerid = value;
    }

    /**
     * MDID (IDREFS/O): Contains the ID attribute values of the <md> elements within the <mdSec> of the METS document that contain administrative metadata pertaining to the file. For more information on using METS IDREFS and IDREF type attributes for internal linking, see Chapter 4 of the METS Primer.
     * 
     * Gets the value of the mdid property.
     * 
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the mdid property.</p>
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * </p>
     * <pre>
     * getMDID().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * </p>
     * 
     * 
     * @return
     *     The value of the mdid property.
     */
    public List<Object> getMDID() {
        if (mdid == null) {
            mdid = new ArrayList<>();
        }
        return this.mdid;
    }

    /**
     * GROUPID (string/O): An identifier that establishes a correspondence between this file and files in other file groups. Typically, this will be used to associate a master file in one file group with the derivative files made from it in other file groups.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getGROUPID() {
        return groupid;
    }

    /**
     * Sets the value of the groupid property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getGROUPID()
     */
    public void setGROUPID(String value) {
        this.groupid = value;
    }

    /**
     * USE (string/O): A tagging attribute to indicate the intended use of all copies of the file aggregated by the <file> element (e.g., master, reference, thumbnails for image files). A USE attribute can be expressed at the<fileGrp> level, the <file> level, the <FLocat> level and/or the <FContent> level.  A USE attribute value at the <fileGrp> level should pertain to all of the files in the <fileGrp>.  A USE attribute at the <file> level should pertain to all copies of the file as represented by subsidiary <FLocat> and/or <FContent> elements.  A USE attribute at the <FLocat> or <FContent> level pertains to the particular copy of the file that is either referenced (<FLocat>) or wrapped (<FContent>).
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUSE() {
        return use;
    }

    /**
     * Sets the value of the use property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getUSE()
     */
    public void setUSE(String value) {
        this.use = value;
    }

    /**
     * BEGIN (string/O): An attribute that specifies the point in the parent <file> where the current <file> begins.  When used in conjunction with a <file> element, this attribute is only meaningful when this element is nested, and its parent <file> element represents a container file. It can be used in conjunction with the END attribute as a means of defining the location of the current file within its parent file. However, the BEGIN attribute can be used with or without a companion END attribute. When no END attribute is specified, the end of the parent file is assumed also to be the end point of the current file. The BEGIN and END attributes can only be interpreted meaningfully in conjunction with a BETYPE attribute, which specifies the kind of beginning/ending point values that are being used.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBEGIN() {
        return begin;
    }

    /**
     * Sets the value of the begin property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getBEGIN()
     */
    public void setBEGIN(String value) {
        this.begin = value;
    }

    /**
     * END (string/O): An attribute that specifies the point in the parent <file> where the current, nested <file> ends. It can only be interpreted meaningfully in conjunction with the BETYPE, which specifies the kind of ending point values being used. Typically the END attribute would only appear in conjunction with a BEGIN attribute.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEND() {
        return end;
    }

    /**
     * Sets the value of the end property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getEND()
     */
    public void setEND(String value) {
        this.end = value;
    }

    /**
     * BETYPE: Begin/End Type.
     * 					BETYPE (string/O): An attribute that specifies the kind of BEGIN and/or END values that are being used.
     *           Suggested attribute values: https://github.com/mets/METS-schema/wiki/METS2-Suggested-Attribute-Values#filebetype-streambetype
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBETYPE() {
        return betype;
    }

    /**
     * Sets the value of the betype property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getBETYPE()
     */
    public void setBETYPE(String value) {
        this.betype = value;
    }

    /**
     * MIMETYPE (string/O): The IANA MIME media type for the associated file or wrapped content. Some values for this attribute can be found on the IANA website.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMIMETYPE() {
        return mimetype;
    }

    /**
     * Sets the value of the mimetype property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getMIMETYPE()
     */
    public void setMIMETYPE(String value) {
        this.mimetype = value;
    }

    /**
     * SIZE (long/O): Specifies the size in bytes of the associated file or wrapped content.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getSIZE() {
        return size;
    }

    /**
     * Sets the value of the size property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     * @see #getSIZE()
     */
    public void setSIZE(Long value) {
        this.size = value;
    }

    /**
     * CREATED (dateTime/O): Specifies the date and time of creation for the associated file or wrapped content.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getCREATED() {
        return created;
    }

    /**
     * Sets the value of the created property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     * @see #getCREATED()
     */
    public void setCREATED(XMLGregorianCalendar value) {
        this.created = value;
    }

    /**
     * CHECKSUM (string/O): Provides a checksum value for the associated file or wrapped content.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCHECKSUM() {
        return checksum;
    }

    /**
     * Sets the value of the checksum property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getCHECKSUM()
     */
    public void setCHECKSUM(String value) {
        this.checksum = value;
    }

    /**
     * CHECKSUMTYPE (enumerated string/O): Specifies the checksum algorithm used to produce the value contained in the CHECKSUM attribute. 
     *           Suggested attribute values: https://github.com/mets/METS-schema/wiki/METS2-Suggested-Attribute-Values#checksumtype-mdref-mdwrap
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCHECKSUMTYPE() {
        return checksumtype;
    }

    /**
     * Sets the value of the checksumtype property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getCHECKSUMTYPE()
     */
    public void setCHECKSUMTYPE(String value) {
        this.checksumtype = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <choice>
     *         <element name="binData" type="{http://www.w3.org/2001/XMLSchema}base64Binary" minOccurs="0"/>
     *         <element name="xmlData" minOccurs="0">
     *           <complexType>
     *             <complexContent>
     *               <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 <sequence>
     *                   <any processContents='lax' maxOccurs="unbounded"/>
     *                 </sequence>
     *               </restriction>
     *             </complexContent>
     *           </complexType>
     *         </element>
     *       </choice>
     *       <attribute name="ID" type="{http://www.w3.org/2001/XMLSchema}ID" />
     *       <attribute name="USE" type="{http://www.w3.org/2001/XMLSchema}string" />
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "binData",
        "xmlData"
    })
    public static class FContent {

        /**
         * A binary data wrapper element <binData> is used to contain a Base64 encoded file.
         * 
         */
        protected byte[] binData;
        /**
         * An xml data wrapper element <xmlData> is used to contain  an XML encoded file. The content of an <xmlData> element can be in any namespace or in no namespace. As permitted by the XML Schema Standard, the processContents attribute value for the metadata in an <xmlData> element is set to “lax”. Therefore, if the source schema and its location are identified by means of an xsi:schemaLocation attribute, then an XML processor will validate the elements for which it can find declarations. If a source schema is not identified, or cannot be found at the specified schemaLocation, then an XML validator will check for well-formedness, but otherwise skip over the elements appearing in the <xmlData> element.
         * 
         */
        protected FileType.FContent.XmlData xmlData;
        /**
         * ID (ID/O): This attribute uniquely identifies the element within the METS document, and would allow the element to be referenced unambiguously from another element or document via an IDREF or an XPTR. For more information on using ID attributes for internal and external linking see Chapter 4 of the METS Primer.
         * 
         */
        @XmlAttribute(name = "ID")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;
        /**
         * USE (string/O): A tagging attribute to indicate the intended use of the specific copy of the file represented by the <FContent> element (e.g., service master, archive master). A USE attribute can be expressed at the<fileGrp> level, the <file> level, the <FLocat> level and/or the <FContent> level.  A USE attribute value at the <fileGrp> level should pertain to all of the files in the <fileGrp>.  A USE attribute at the <file> level should pertain to all copies of the file as represented by subsidiary <FLocat> and/or <FContent> elements.  A USE attribute at the <FLocat> or <FContent> level pertains to the particular copy of the file that is either referenced (<FLocat>) or wrapped (<FContent>).
         * 
         */
        @XmlAttribute(name = "USE")
        protected String use;

        /**
         * A binary data wrapper element <binData> is used to contain a Base64 encoded file.
         * 
         * @return
         *     possible object is
         *     byte[]
         */
        public byte[] getBinData() {
            return binData;
        }

        /**
         * Sets the value of the binData property.
         * 
         * @param value
         *     allowed object is
         *     byte[]
         * @see #getBinData()
         */
        public void setBinData(byte[] value) {
            this.binData = value;
        }

        /**
         * An xml data wrapper element <xmlData> is used to contain  an XML encoded file. The content of an <xmlData> element can be in any namespace or in no namespace. As permitted by the XML Schema Standard, the processContents attribute value for the metadata in an <xmlData> element is set to “lax”. Therefore, if the source schema and its location are identified by means of an xsi:schemaLocation attribute, then an XML processor will validate the elements for which it can find declarations. If a source schema is not identified, or cannot be found at the specified schemaLocation, then an XML validator will check for well-formedness, but otherwise skip over the elements appearing in the <xmlData> element.
         * 
         * @return
         *     possible object is
         *     {@link FileType.FContent.XmlData }
         *     
         */
        public FileType.FContent.XmlData getXmlData() {
            return xmlData;
        }

        /**
         * Sets the value of the xmlData property.
         * 
         * @param value
         *     allowed object is
         *     {@link FileType.FContent.XmlData }
         *     
         * @see #getXmlData()
         */
        public void setXmlData(FileType.FContent.XmlData value) {
            this.xmlData = value;
        }

        /**
         * ID (ID/O): This attribute uniquely identifies the element within the METS document, and would allow the element to be referenced unambiguously from another element or document via an IDREF or an XPTR. For more information on using ID attributes for internal and external linking see Chapter 4 of the METS Primer.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getID() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getID()
         */
        public void setID(String value) {
            this.id = value;
        }

        /**
         * USE (string/O): A tagging attribute to indicate the intended use of the specific copy of the file represented by the <FContent> element (e.g., service master, archive master). A USE attribute can be expressed at the<fileGrp> level, the <file> level, the <FLocat> level and/or the <FContent> level.  A USE attribute value at the <fileGrp> level should pertain to all of the files in the <fileGrp>.  A USE attribute at the <file> level should pertain to all copies of the file as represented by subsidiary <FLocat> and/or <FContent> elements.  A USE attribute at the <FLocat> or <FContent> level pertains to the particular copy of the file that is either referenced (<FLocat>) or wrapped (<FContent>).
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getUSE() {
            return use;
        }

        /**
         * Sets the value of the use property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getUSE()
         */
        public void setUSE(String value) {
            this.use = value;
        }


        /**
         * <p>Java class for anonymous complex type</p>.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.</p>
         * 
         * <pre>{@code
         * <complexType>
         *   <complexContent>
         *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       <sequence>
         *         <any processContents='lax' maxOccurs="unbounded"/>
         *       </sequence>
         *     </restriction>
         *   </complexContent>
         * </complexType>
         * }</pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "any"
        })
        public static class XmlData {

            @XmlAnyElement(lax = true)
            protected List<Object> any;

            /**
             * Gets the value of the any property.
             * 
             * <p>This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the any property.</p>
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * </p>
             * <pre>
             * getAny().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link Object }
             * {@link Element }
             * </p>
             * 
             * 
             * @return
             *     The value of the any property.
             */
            public List<Object> getAny() {
                if (any == null) {
                    any = new ArrayList<>();
                }
                return this.any;
            }

        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <attGroup ref="{http://www.loc.gov/METS/v2}LOCATION"/>
     *       <attribute name="ID" type="{http://www.w3.org/2001/XMLSchema}ID" />
     *       <attribute name="USE" type="{http://www.w3.org/2001/XMLSchema}string" />
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class FLocat {

        /**
         * ID (ID/O): This attribute uniquely identifies the element within the METS document, and would allow the element to be referenced unambiguously from another element or document via an IDREF or an XPTR. For more information on using ID attributes for internal and external linking see Chapter 4 of the METS Primer.
         * 
         */
        @XmlAttribute(name = "ID")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;
        /**
         * USE (string/O): A tagging attribute to indicate the intended use of the specific copy of the file  represented by the <FLocat> element (e.g., service master, archive master). A USE attribute can be expressed at the<fileGrp> level, the <file> level, the <FLocat> level and/or the <FContent> level.  A USE attribute value at the <fileGrp> level should pertain to all of the files in the <fileGrp>.  A USE attribute at the <file> level should pertain to all copies of the file as represented by subsidiary <FLocat> and/or <FContent> elements.  A USE attribute at the <FLocat> or <FContent> level pertains to the particular copy of the file that is either referenced (<FLocat>) or wrapped (<FContent>).
         * 
         */
        @XmlAttribute(name = "USE")
        protected String use;
        /**
         * LOCREF (string/R): Specifies the location for resources. This may be a directly-resolvable URL (preferred for interoperability), or it may require the use of an external resolver or be system-specific. The LOCTYPE attribute identifies the type of location.
         * 
         */
        @XmlAttribute(name = "LOCREF", required = true)
        protected String locref;
        /**
         * LOCTYPE (string/R): Specifies the locator type used in the LOCREF attribute.
         *             Suggested attribute values: https://github.com/mets/METS-schema/wiki/METS2-Suggested-Attribute-Values#loctype-mptr-mdref-flocat
         * 
         */
        @XmlAttribute(name = "LOCTYPE", required = true)
        protected String loctype;

        /**
         * ID (ID/O): This attribute uniquely identifies the element within the METS document, and would allow the element to be referenced unambiguously from another element or document via an IDREF or an XPTR. For more information on using ID attributes for internal and external linking see Chapter 4 of the METS Primer.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getID() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getID()
         */
        public void setID(String value) {
            this.id = value;
        }

        /**
         * USE (string/O): A tagging attribute to indicate the intended use of the specific copy of the file  represented by the <FLocat> element (e.g., service master, archive master). A USE attribute can be expressed at the<fileGrp> level, the <file> level, the <FLocat> level and/or the <FContent> level.  A USE attribute value at the <fileGrp> level should pertain to all of the files in the <fileGrp>.  A USE attribute at the <file> level should pertain to all copies of the file as represented by subsidiary <FLocat> and/or <FContent> elements.  A USE attribute at the <FLocat> or <FContent> level pertains to the particular copy of the file that is either referenced (<FLocat>) or wrapped (<FContent>).
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getUSE() {
            return use;
        }

        /**
         * Sets the value of the use property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getUSE()
         */
        public void setUSE(String value) {
            this.use = value;
        }

        /**
         * LOCREF (string/R): Specifies the location for resources. This may be a directly-resolvable URL (preferred for interoperability), or it may require the use of an external resolver or be system-specific. The LOCTYPE attribute identifies the type of location.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLOCREF() {
            return locref;
        }

        /**
         * Sets the value of the locref property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getLOCREF()
         */
        public void setLOCREF(String value) {
            this.locref = value;
        }

        /**
         * LOCTYPE (string/R): Specifies the locator type used in the LOCREF attribute.
         *             Suggested attribute values: https://github.com/mets/METS-schema/wiki/METS2-Suggested-Attribute-Values#loctype-mptr-mdref-flocat
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getLOCTYPE() {
            return loctype;
        }

        /**
         * Sets the value of the loctype property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getLOCTYPE()
         */
        public void setLOCTYPE(String value) {
            this.loctype = value;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <attribute name="ID" type="{http://www.w3.org/2001/XMLSchema}ID" />
     *       <attribute name="streamType" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       <attribute name="OWNERID" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       <attribute name="MDID" type="{http://www.w3.org/2001/XMLSchema}IDREFS" />
     *       <attribute name="BEGIN" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       <attribute name="END" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       <attribute name="BETYPE" type="{http://www.w3.org/2001/XMLSchema}string" />
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class Stream {

        /**
         * ID (ID/O): This attribute uniquely identifies the element within the METS document, and would allow the element to be referenced unambiguously from another element or document via an IDREF or an XPTR. For more information on using ID attributes for internal and external linking see Chapter 4 of the METS Primer.
         * 
         */
        @XmlAttribute(name = "ID")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;
        /**
         * streamType (string/O): The IANA MIME media type for the bytestream.
         * 
         */
        @XmlAttribute(name = "streamType")
        protected String streamType;
        /**
         * OWNERID (string/O): Used to provide a unique identifier (which could include a URI) assigned to the file. This identifier may differ from the URI used to retrieve the file.
         * 
         */
        @XmlAttribute(name = "OWNERID")
        protected String ownerid;
        /**
         * MDID (IDREFS/O): Contains the ID attribute values of the <md> elements within the <mdSec> of the METS document that contain metadata pertaining to the bytestream. For more information on using METS IDREFS and IDREF type attributes for internal linking, see Chapter 4 of the METS Primer.
         * 
         */
        @XmlAttribute(name = "MDID")
        @XmlIDREF
        @XmlSchemaType(name = "IDREFS")
        protected List<Object> mdid;
        /**
         * BEGIN (string/O): An attribute that specifies the point in the parent <file> where the current <stream> begins. It can be used in conjunction with the END attribute as a means of defining the location of the stream within its parent file. However, the BEGIN attribute can be used with or without a companion END attribute. When no END attribute is specified, the end of the parent file is assumed also to be the end point of the stream. The BEGIN and END attributes can only be interpreted meaningfully in conjunction with a BETYPE attribute, which specifies the kind of beginning/ending point values that are being used.
         * 
         */
        @XmlAttribute(name = "BEGIN")
        protected String begin;
        /**
         * END (string/O): An attribute that specifies the point in the parent <file> where the <stream> ends. It can only be interpreted meaningfully in conjunction with the BETYPE, which specifies the kind of ending point values being used. Typically the END attribute would only appear in conjunction with a BEGIN attribute.
         * 
         */
        @XmlAttribute(name = "END")
        protected String end;
        /**
         * BETYPE: Begin/End Type.
         *                     BETYPE (string/O): An attribute that specifies the kind of BEGIN and/or END values that are being used. 
         *                     Suggested attribute values: https://github.com/mets/METS-schema/wiki/METS2-Suggested-Attribute-Values#filebetype-streambetype
         * 
         */
        @XmlAttribute(name = "BETYPE")
        protected String betype;

        /**
         * ID (ID/O): This attribute uniquely identifies the element within the METS document, and would allow the element to be referenced unambiguously from another element or document via an IDREF or an XPTR. For more information on using ID attributes for internal and external linking see Chapter 4 of the METS Primer.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getID() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getID()
         */
        public void setID(String value) {
            this.id = value;
        }

        /**
         * streamType (string/O): The IANA MIME media type for the bytestream.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getStreamType() {
            return streamType;
        }

        /**
         * Sets the value of the streamType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getStreamType()
         */
        public void setStreamType(String value) {
            this.streamType = value;
        }

        /**
         * OWNERID (string/O): Used to provide a unique identifier (which could include a URI) assigned to the file. This identifier may differ from the URI used to retrieve the file.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getOWNERID() {
            return ownerid;
        }

        /**
         * Sets the value of the ownerid property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getOWNERID()
         */
        public void setOWNERID(String value) {
            this.ownerid = value;
        }

        /**
         * MDID (IDREFS/O): Contains the ID attribute values of the <md> elements within the <mdSec> of the METS document that contain metadata pertaining to the bytestream. For more information on using METS IDREFS and IDREF type attributes for internal linking, see Chapter 4 of the METS Primer.
         * 
         * Gets the value of the mdid property.
         * 
         * <p>This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the mdid property.</p>
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * </p>
         * <pre>
         * getMDID().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Object }
         * </p>
         * 
         * 
         * @return
         *     The value of the mdid property.
         */
        public List<Object> getMDID() {
            if (mdid == null) {
                mdid = new ArrayList<>();
            }
            return this.mdid;
        }

        /**
         * BEGIN (string/O): An attribute that specifies the point in the parent <file> where the current <stream> begins. It can be used in conjunction with the END attribute as a means of defining the location of the stream within its parent file. However, the BEGIN attribute can be used with or without a companion END attribute. When no END attribute is specified, the end of the parent file is assumed also to be the end point of the stream. The BEGIN and END attributes can only be interpreted meaningfully in conjunction with a BETYPE attribute, which specifies the kind of beginning/ending point values that are being used.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getBEGIN() {
            return begin;
        }

        /**
         * Sets the value of the begin property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getBEGIN()
         */
        public void setBEGIN(String value) {
            this.begin = value;
        }

        /**
         * END (string/O): An attribute that specifies the point in the parent <file> where the <stream> ends. It can only be interpreted meaningfully in conjunction with the BETYPE, which specifies the kind of ending point values being used. Typically the END attribute would only appear in conjunction with a BEGIN attribute.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getEND() {
            return end;
        }

        /**
         * Sets the value of the end property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getEND()
         */
        public void setEND(String value) {
            this.end = value;
        }

        /**
         * BETYPE: Begin/End Type.
         *                     BETYPE (string/O): An attribute that specifies the kind of BEGIN and/or END values that are being used. 
         *                     Suggested attribute values: https://github.com/mets/METS-schema/wiki/METS2-Suggested-Attribute-Values#filebetype-streambetype
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getBETYPE() {
            return betype;
        }

        /**
         * Sets the value of the betype property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getBETYPE()
         */
        public void setBETYPE(String value) {
            this.betype = value;
        }

    }


    /**
     * <p>Java class for anonymous complex type</p>.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.</p>
     * 
     * <pre>{@code
     * <complexType>
     *   <complexContent>
     *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       <attribute name="ID" type="{http://www.w3.org/2001/XMLSchema}ID" />
     *       <attribute name="TRANSFORMTYPE" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       <attribute name="TRANSFORMALGORITHM" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       <attribute name="TRANSFORMKEY" type="{http://www.w3.org/2001/XMLSchema}string" />
     *       <attribute name="TRANSFORMORDER" use="required" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" />
     *     </restriction>
     *   </complexContent>
     * </complexType>
     * }</pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "")
    public static class TransformFile {

        /**
         * ID (ID/O): This attribute uniquely identifies the element within the METS document, and would allow the element to be referenced unambiguously from another element or document via an IDREF or an XPTR. For more information on using ID attributes for internal and external linking see Chapter 4 of the METS Primer.
         * 
         */
        @XmlAttribute(name = "ID")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;
        /**
         * TRANSFORMTYPE (string/R): Is used to indicate the type of transformation needed to render content of a file accessible. This may include unpacking a file into subsidiary files/streams.
         * 
         *                   Suggested attribute values: https://github.com/mets/METS-schema/wiki/METS2-Suggested-Attribute-Values#transformfiletransformtype
         * 
         */
        @XmlAttribute(name = "TRANSFORMTYPE", required = true)
        protected String transformtype;
        /**
         * TRANSFORMALGORITHM (string/R): Specifies the decompression or decryption routine used to access the contents of the file. Algorithms for compression can be either loss-less or lossy.
         * 
         */
        @XmlAttribute(name = "TRANSFORMALGORITHM", required = true)
        protected String transformalgorithm;
        /**
         * TRANSFORMKEY (string/O): A key to be used with the transform algorithm for accessing the file’s contents.
         * 
         */
        @XmlAttribute(name = "TRANSFORMKEY")
        protected String transformkey;
        /**
         * TRANSFORMORDER (postive-integer/R): The order in which the instructions must be followed in order to unpack or transform the container file.
         * 
         */
        @XmlAttribute(name = "TRANSFORMORDER", required = true)
        @XmlSchemaType(name = "positiveInteger")
        protected BigInteger transformorder;

        /**
         * ID (ID/O): This attribute uniquely identifies the element within the METS document, and would allow the element to be referenced unambiguously from another element or document via an IDREF or an XPTR. For more information on using ID attributes for internal and external linking see Chapter 4 of the METS Primer.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getID() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getID()
         */
        public void setID(String value) {
            this.id = value;
        }

        /**
         * TRANSFORMTYPE (string/R): Is used to indicate the type of transformation needed to render content of a file accessible. This may include unpacking a file into subsidiary files/streams.
         * 
         *                   Suggested attribute values: https://github.com/mets/METS-schema/wiki/METS2-Suggested-Attribute-Values#transformfiletransformtype
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTRANSFORMTYPE() {
            return transformtype;
        }

        /**
         * Sets the value of the transformtype property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getTRANSFORMTYPE()
         */
        public void setTRANSFORMTYPE(String value) {
            this.transformtype = value;
        }

        /**
         * TRANSFORMALGORITHM (string/R): Specifies the decompression or decryption routine used to access the contents of the file. Algorithms for compression can be either loss-less or lossy.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTRANSFORMALGORITHM() {
            return transformalgorithm;
        }

        /**
         * Sets the value of the transformalgorithm property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getTRANSFORMALGORITHM()
         */
        public void setTRANSFORMALGORITHM(String value) {
            this.transformalgorithm = value;
        }

        /**
         * TRANSFORMKEY (string/O): A key to be used with the transform algorithm for accessing the file’s contents.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTRANSFORMKEY() {
            return transformkey;
        }

        /**
         * Sets the value of the transformkey property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         * @see #getTRANSFORMKEY()
         */
        public void setTRANSFORMKEY(String value) {
            this.transformkey = value;
        }

        /**
         * TRANSFORMORDER (postive-integer/R): The order in which the instructions must be followed in order to unpack or transform the container file.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getTRANSFORMORDER() {
            return transformorder;
        }

        /**
         * Sets the value of the transformorder property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         * @see #getTRANSFORMORDER()
         */
        public void setTRANSFORMORDER(BigInteger value) {
            this.transformorder = value;
        }

    }

}
